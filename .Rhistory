df <- select(df, -variable)
return(df)
}
# full.panel separates benefit/taking/perception questions and
# merge them by unique_id, domain and question number
# and add a numeric id by unique_id
full.panel <- function(df){
df <- selectcol(df)
benefit <- panelform(df, "RB")
taking <- panelform(df, "RT")
perception <- panelform(df, "RP")
df <- Reduce(function(x,y) merge(x, y, by=c("unique_id", "domain", "Qnumber"),
all=TRUE), list(taking, perception, benefit))
df <- mutate(df, id=as.numeric(factor(unique_id)))
return(df)
}
df <- dplyr:: tbl_df(df)
colnames(df) <- c("unique_id", names(df)[-1])
df <- df %>% filter(unique_id != "ResponseID")
#     %>%
#     dplyr::rename(
#     unique_id = V1) %>%
#     filter(unique_id != "ResponseID")
select_df <- selectcol(df)
dat <- full.panel(select_df)
return(dat)
}
clean_test <- read_csv("data/raw_data/DOSPERT_test.csv")
out <- d_clean(clean_test)
out
df  <- dplyr:: tbl_df(read_csv(fh, na = "NA"))
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
# try testing with the newly downloaded data
library(DOSPERT)
clean_test <- read_csv("data/raw_data/DOSPERT_test.csv")
out <- d_clean(clean_test)
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
setwd("/git_repositories/betterment_project")
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
clean_test <- read_csv("data/raw_data/DOSPERT_test.csv")
out <- d_clean(clean_test)
out
fh <- "data/raw_data/DOSPERT_test.csv"
d_read(fh)
out_read <- d_read(fh)
out_read
scored_clean <- d_score(out)
scored_read <- d_score(out_read)
#reading in libraries##############################################
library(readr)
library(dplyr)
library(reshape2)
library(xtable)
library(plyr)
scored_clean <- d_score(out)
scored_read <- d_score(out_read)
scored_clean
scored_read
setwd("/git_repositories/betterment_project")
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
print_dscore(scored_clean, type = 'html')
print_dscore(scored_read, type = 'html')
library(DOSPERT)
library(DOSPERT)
library(DOSPERT)
library(DOSPERT)
require(devtools)
use_vignette("DOSPERT")
setwd("/git_repositories/betterment_project")
install("DOSPERT")
??d_read
??filter
setwd("/git_repositories/betterment_project")
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
# try testing with the newly downloaded data
d_read("data/raw_data/DOSPERT_test.csv")
fh <- "data/raw_data/DOSPERT_test.csv"
out_read <- d_read(fh)
clean_test <- read_csv("data/raw_data/DOSPERT_test.csv")
out <- d_clean(clean_test)
scored_clean <- d_score(out)
scored_read <- d_score(out_read)
print_dscore(scored_clean, type = 'html')
print_dscore(scored_read, type = 'html')
setwd("/git_repositories/betterment_project")
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
d_read("data/raw_data/DOSPERT_test.csv")
library(DOSPERT)
setwd("/git_repositories/betterment_project")
require(devtools)
install("DOSPERT")
require(dplyr)
require(readr)
require(reshape2)
# try testing with the newly downloaded data
d_read("data/raw_data/DOSPERT_test.csv")
fh <- "data/raw_data/DOSPERT_test.csv"
out_read <- d_read(fh)
out_read
clean_test <- read_csv("data/raw_data/DOSPERT_test.csv")
out <- d_clean(clean_test)
scored_clean <- d_score(out)
scored_read <- d_score(out_read)
print_dscore(scored_clean, type = 'html')
print_dscore(scored_read, type = 'html')
clean_test <- read_csv("data/raw_data/DOSPERT_test.csv")
out <- d_clean(clean_test)
require(xtable)
scored_clean <- d_score(out)
scored_read <- d_score(out_read)
require(plyr)
scored_clean <- d_score(out)
scored_read <- d_score(out_read)
print_dscore(scored_clean, type = 'html')
print_dscore(scored_read, type = 'html')
library(DOSPERT)
?? d_clean
library(DOSPERT)
?? d_clean
library(DOSPERT)
?? d_clean
library(DOSPERT)
library(DOSPERT)
?? d_read
library(DOSPERT)
library(DOSPERT)
??d_score
setwd("/git_repositories/betterment_project")
require(devtools)
install("DOSPERT")
require(plyr)
require(dplyr)
require(readr)
require(reshape2)
require(xtable)
# try testing with the newly downloaded data
d_read("data/raw_data/DOSPERT_test.csv")
fh <- "data/raw_data/DOSPERT_test.csv"
out_read <- d_read(fh)
clean_test <- read_csv("data/raw_data/DOSPERT_test.csv")
out <- d_clean(clean_test)
scored_clean <- d_score(out)
scored_read <- d_score(out_read)
d_score(d_read(fh))
d_score(d_clean(read_csv("data/raw_data/DOSPERT_test.csv")))
print_dscore(scored_clean, type = 'html')
print_dscore(scored_read, type = 'html')
library(DOSPERT)
??d_score
require(devtools)
require(plyr)
require(dplyr)
require(readr)
require(reshape2)
require(xtable)
fh <- "data/raw_data/DOSPERT_test.csv"
out_read <- d_read(fh)
devtools::use_data(out_read)
setwd("/git_repositories/betterment_project/dospert")
fh <- "data/raw_data/DOSPERT_test.csv"
out_read <- d_read(fh)
devtools::use_data(out_read)
load("/git_repositories/betterment_project/dospert/data/out_read.rda")
load("/git_repositories/betterment_project/dospert/data/DOSPERT_test.rda")
t<-load("/git_repositories/betterment_project/dospert/data/DOSPERT_test.rda")
t
fh <- "data/raw_data/DOSPERT_test.csv"
DOSPERT_test <- read_csv(fh)
setwd("/git_repositories/betterment_project/dospert")
fh <- "data/raw_data/DOSPERT_test.csv"
DOSPERT_test <- read_csv(fh)
setwd("/git_repositories/betterment_project")
fh <- "data/raw_data/DOSPERT_test.csv"
DOSPERT_test <- read_csv(fh)
setwd("/git_repositories/betterment_project/dospert")
devtools::use_data(DOSPERT_test)
devtools::use_data(DOSPERT_test, overwrite = TRUE)
DOSPERT_Test
DOSPERT_test
library(DOSPERT)
library(DOSPERT)
??DOSPERT_test
library(DOSPERT)
setwd("/git_repositories/betterment_project")
require(devtools)
install("DOSPERT")
require(plyr)
require(dplyr)
require(readr)
require(reshape2)
require(xtable)
??DOSPERT_test
setwd("/git_repositories/betterment_project/dospert")
setwd("/git_repositories/betterment_project")
install("DOSPERT")
require(Devtools)
require(devtools)
install("DOSPERT")
data(DOSPERT_test, package = 'DOSPERT')
test <- data(DOSPERT_test, package = 'DOSPERT')
data('DOSPERT_test')
setwd("~/Dropbox/Columbia MSMK/2015_Spring/Empirical models/Empirical models_project/DATA")
require(readr)
data <- read_csv("Product_Reviews.csv")
load("/git_repositories/betterment_project/dospert/data/DOSPERT_test.rda")
View(DOSPERT_test)
library(DOSPERT)
?DOSPERT::d_clean()
?d_clean()
?d_score()
library(dospert)
library(dospert)
library(dospert)
setwd("/git_repositories/betterment_project")
install.packages('dospert')
install.packages("dospert")
install.packages("~/git_repositories/betterment_project/dospert_0.2.tar.gz", repos=NULL, type="source")
install.packages("/git_repositories/betterment_project/dospert_0.2.tar.gz", repos=NULL, type="source")
library(dospert)
library(readr)
library(dospert)
library(dospert)
library(dospert)
??d_clean
library(dospert)
??d_clean
library(dospert)
??d_clean
library(dospert)
??d_clean
df <- d_clean(pilot, "uid")
reg <- dlply(df, c("id", "domain"), function(data) lm(RT ~ RB + RP, data = data))
idlist <- unique(select(df, unique_id, id))
df <- d_clean(pilot, "uid")
pilot <- read_csv("data/raw_data/Betterment_Pilot_7_29.csv")
df <- d_clean(pilot, "uid")
library(dospert)
d_sum <- function(df, var, domain, risk_type, file_type = "csv"){
uniqR_csv <- function(df, var) {
df <- df %>% rename_(unique_id = as.symbol(var))
df <- df[-1, ]
}
# for .xml, use the identified variable as unique_id
uniqR_xml <- function(df, var){
df <- df %>% rename_(unique_id = as.symbol(var))
}
fac_friendly <- function(x) {
x <- as.numeric(as.character(x))
}
if(file_type == "csv"){
df <- uniqR_csv(df, var)
} else if (file_type == "xml") {
df <- uniqR_xml(df, var)
}
selectcol <- function(df, domain, risk_type){
x<- df %>% select(
starts_with(eval(paste0(domain, risk_type))))
x <- x %>% mutate_each(funs(fac_friendly))
## making sure correct type of conversion
dat <- data.frame(select(df, unique_id), x)
return(dat)
}
df <- selectcol(df, domain, risk_type)
df$sum <- rowSums(df[ , -1])
df <- df %>% select(unique_id, sum)
colnames(df)[2] <- paste0(domain, risk_type, "_sum")
return(df)
}
library(dospert)
??d_sum
library(dospert)
??d_sum
library(dospert)
??d_sum
source('/git_repositories/betterment_project/scripts/Separate functions/new_dscore.R')
library(dospert)
??d_score
??d_sum
library(dospert)
library(dospert)
source('/git_repositories/betterment_project/scripts/Separate_functions/new_dclean.R')
d_clean <- function(df, var, file_type = "csv"){
# make sure factors are correctly converted into numeric format
# used in [selectcol] function
# for .csv, use the identified variable as unique_id and remove the first row
uniqR_csv <- function(df, var) {
df <- df %>% rename_(unique_id = as.symbol(var))
df <- df[-1, ]
}
# for .xml, use the identified variable as unique_id
uniqR_xml <- function(df, var){
df <- df %>% rename_(unique_id = as.symbol(var))
}
# take dataframe and subset only the columns of responses
# to risk- questions and make sure that they are in numeric
# format. Then, link unique_id and responses back as identifier.
# df should be contain only rows of responses
# column names of risk-responses should start with first three
# characters of the domain followed by RT, RB, RP
# df should have a column named 'unique_id', uniquely identifying the
# survey taker.
# full.panel separates benefit/taking/perception questions and
# merge them by unique_id, domain and question number
# and add a numeric id by unique_id
full.panel <- function(df){
fac_friendly <- function(x) {
x <- as.numeric(as.character(x))
}
selectcol <- function(df){
x<- df %>% select(
starts_with("finR"), starts_with("heaR"),
starts_with("safR"), starts_with("recR"),
starts_with("ethR"), starts_with("socR"))
x <- x %>% mutate_each(funs(fac_friendly))
## making sure correct type of conversion
dat <- data.frame(select(df, unique_id), x)
return(dat)
}
# panelform function is used in [full.panel] function
# changes input df into longform and identifies the question
# domain, number and type (e.g. fin 6 RT, 6th question in
# finance domain, of Risk Taking)
panelform <- function(df, var) {
df <- df %>% select( unique_id, contains(paste0(var, "_")))
df <- melt(df, id="unique_id", value.name = var)
df <- mutate(df, domain = substr(variable, 1, 3), Qnumber=substr(variable, 7, 7))
df <- select(df, -variable)
return(df)
}
df <- selectcol(df)
benefit <- panelform(df, "RB")
taking <- panelform(df, "RT")
perception <- panelform(df, "RP")
df <- Reduce(function(x,y) merge(x, y, by=c("unique_id", "domain", "Qnumber"),
all=TRUE), list(taking, perception, benefit))
df <- mutate(df, id=as.numeric(factor(unique_id)))
return(df)
}
df <- dplyr:: tbl_df(df)
if (file_type == "csv") {
df <- uniqR_csv(df, var)
dat <- full.panel(df)
dat$sum <- rowSums(cbind(dat$RT, dat$RP, dat$RB))
dat_group <- dat %>% group_by(id) %>% dplyr::mutate(group_sum = sum(sum)) %>%
filter(!is.na(group_sum)) %>% select(-sum, -group_sum)
dat <- ungroup(dat_group)
return(dat)
} else if (file_type == "xml") {
df <- uniqR_xml(df, var)
dat <- full.panel(df)
dat$sum <- rowSums(cbind(dat$RT, dat$RP, dat$RB))
dat_group <- dat %>% group_by(id) %>% dplyr::mutate(group_sum = sum(sum)) %>%
filter(!is.na(group_sum)) %>% select(-sum, -group_sum)
dat <- ungroup(dat_group)
return(dat)
}
}
return(dat)
#' d_clean function
#'
#' This function takes dataframe and appends the results of analyses at the left end of the original dataframe.
#' @param df Dataframe that is not formatted, downloaded from Qualtrics.
#' @param var Name of the column serves as unique identifier in dataset.
#' @param file_type csv or xml
#' @keywords dospert
#' @export
#' @examples
#' csvdata <- read_csv("data/raw_data/DOSPERT_test.csv")
#' csvScore <- d_score(csvdata, "uid", file_type = "csv")
#' xmldata <- xmlToDataFrame("data/raw_data/DOSPERT_test.xml", stringsAsFactors = F)
#' xmlScore <- d_score(xmldata, "uid", file_type = "xml")
d_clean <- function(df, var, file_type = "csv"){
# make sure factors are correctly converted into numeric format
# used in [selectcol] function
# for .csv, use the identified variable as unique_id and remove the first row
uniqR_csv <- function(df, var) {
df <- df %>% rename_(unique_id = as.symbol(var))
df <- df[-1, ]
}
# for .xml, use the identified variable as unique_id
uniqR_xml <- function(df, var){
df <- df %>% rename_(unique_id = as.symbol(var))
}
# take dataframe and subset only the columns of responses
# to risk- questions and make sure that they are in numeric
# format. Then, link unique_id and responses back as identifier.
# df should be contain only rows of responses
# column names of risk-responses should start with first three
# characters of the domain followed by RT, RB, RP
# df should have a column named 'unique_id', uniquely identifying the
# survey taker.
# full.panel separates benefit/taking/perception questions and
# merge them by unique_id, domain and question number
# and add a numeric id by unique_id
full.panel <- function(df){
fac_friendly <- function(x) {
x <- as.numeric(as.character(x))
}
selectcol <- function(df){
x<- df %>% select(
starts_with("finR"), starts_with("heaR"),
starts_with("safR"), starts_with("recR"),
starts_with("ethR"), starts_with("socR"))
x <- x %>% mutate_each(funs(fac_friendly))
## making sure correct type of conversion
dat <- data.frame(select(df, unique_id), x)
return(dat)
}
# panelform function is used in [full.panel] function
# changes input df into longform and identifies the question
# domain, number and type (e.g. fin 6 RT, 6th question in
# finance domain, of Risk Taking)
panelform <- function(df, var) {
df <- df %>% select( unique_id, contains(paste0(var, "_")))
df <- melt(df, id="unique_id", value.name = var)
df <- mutate(df, domain = substr(variable, 1, 3), Qnumber=substr(variable, 7, 7))
df <- select(df, -variable)
return(df)
}
df <- selectcol(df)
benefit <- panelform(df, "RB")
taking <- panelform(df, "RT")
perception <- panelform(df, "RP")
df <- Reduce(function(x,y) merge(x, y, by=c("unique_id", "domain", "Qnumber"),
all=TRUE), list(taking, perception, benefit))
df <- mutate(df, id=as.numeric(factor(unique_id)))
return(df)
}
df <- dplyr:: tbl_df(df)
if (file_type == "csv") {
df <- uniqR_csv(df, var)
dat <- full.panel(df)
dat$sum <- rowSums(cbind(dat$RT, dat$RP, dat$RB))
dat_group <- dat %>% group_by(id) %>% dplyr::mutate(group_sum = sum(sum)) %>%
filter(!is.na(group_sum)) %>% select(-sum, -group_sum)
dat <- ungroup(dat_group)
return(dat)
} else if (file_type == "xml") {
df <- uniqR_xml(df, var)
dat <- full.panel(df)
dat$sum <- rowSums(cbind(dat$RT, dat$RP, dat$RB))
dat_group <- dat %>% group_by(id) %>% dplyr::mutate(group_sum = sum(sum)) %>%
filter(!is.na(group_sum)) %>% select(-sum, -group_sum)
dat <- ungroup(dat_group)
return(dat)
}
}
setwd("/git_repositories/betterment_project")
pilot <- read_csv("data/raw_data/DOSPERT_test.csv")
clean <- new_d_clean(pilot, names(pilot)[1], "csv")
clean_withoutfiletype <- new_d_clean(pilot, names(pilot)[1])
pilot2 <- xmlToDataFrame("data/raw_data/Betterment_Pilot_8_5.xml", stringsAsFactors = F) %>%
filter(uid != "")
clean2 <- new_d_clean(pilot2, "uid", "xml")
pilot3 <- read_csv("data/raw_data/Betterment_Pilot_7_29.csv") %>%
filter(uid != "")
result3 <- new_d_clean(pilot3, "uid", "csv")
#reading in libraries##############################################
library(readr)
library(plyr)
library(dplyr)
library(XML)
library(reshape2)
library(xtable)
library(ggplot2)
library(texreg)
setwd("/git_repositories/betterment_project")
pilot <- read_csv("data/raw_data/DOSPERT_test.csv")
clean <- d_clean(pilot, names(pilot)[1], "csv")
clean_withoutfiletype <- d_clean(pilot, names(pilot)[1])
pilot2 <- xmlToDataFrame("data/raw_data/Betterment_Pilot_8_5.xml", stringsAsFactors = F) %>%
filter(uid != "")
clean2 <- d_clean(pilot2, "uid", "xml")
View(clean2)
View(clean)
pilot3 <- read_csv("data/raw_data/Betterment_Pilot_7_29.csv") %>%
filter(uid != "")
result3 <- d_clean(pilot3, "uid", "csv")
View(result3)
View(pilot)
library(dospert)
library(dospert)
library(dospert)
